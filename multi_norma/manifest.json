{
    "title": "MultiNormA",
    "description": "Improved algorithm based on NorM (https://doi.org/10.1109/ICDE48307.2020.00182).",
    "inputDimensionality": "multivariate",
    "version": "0.3.0",
    "authors": "Ben-Noah Engelhaupt, Leo Wendt, Paul Boniol, Michele Linardi, Federico Roncallo, Themis Palpanas",
    "language": "Python",
    "type": "Detector",
    "mainFile": "algorithm.py",
    "learningType": "unsupervised",
    "executionStep": {
    	"parameters": [
            {
                "name": "anomaly_window_size",
                "type": "int",
                "defaultValue": 20,
                "optional": "true",
                "description": "Sliding window size used to create subsequences (equal to desired anomaly length)"
            },{
                "name": "normal_model_percentage",
                "type": "float",
                "defaultValue": 0.5,
                "optional": "true",
                "description": "Percentage of (random) subsequences used to build the normal model."
            },{
                "name": "max_motifs",
                "type": "int",
                "defaultValue": 4096,
                "optional": "true",
                "description": "Maximum number of used motifs. Important to avoid OOM errors."
            },{
                "name": "random_state",
                "type": "int",
                "defaultValue": 42,
                "optional": "true",
                "description": "Seed for random number generation."
            },
            {
                "name": "motif_detection",
                "type": "Enum[stomp,random,mixed]",
                "defaultValue": "mixed",
                "optional": "false",
                "description": "Algorithm to use for motif detection [random, stomp, mixed]."
            },
            {
                "name": "sum_dims",
                "type": "boolean",
                "defaultValue": false,
                "optional": "false",
                "description": "Sum all dimensions up before computing dists, otherwise each dim is handled seperately."
            },
            {
                "name": "normalize_join",
                "type": "boolean",
                "defaultValue": true,
                "optional": "false",
                "description": "Apply join normalization heuristic. [false = no normalization, true = normalize]"
            },
            {
                "name": "join_combine_method",
                "type": "int",
                "defaultValue": 1,
                "optional": "false",
                "description": "how to combine the join values from all dimensions.[0=sum, 1=max, 2=score dims (based on std, mean, range), 3=weight higher vals, 4=vals**channels]"
            }
        ],
        "modelInput": "none"
    }
}
