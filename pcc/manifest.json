{
    "title": "PCC",
    "description": "Implementation of http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=003008C2CF2373B9C332D4A1DB035515?doi=10.1.1.66.299.",
    "inputDimensionality": "multivariate",
    "version": "0.3.0",
    "authors": "Mei-ling Shyu, Shu-ching Chen, Kanoksri Sarinnapakorn, Liwu Chang",
    "language": "Python",
    "type": "Detector",
    "mainFile": "algorithm.py",
    "learningType": "unsupervised",
    "executionStep": {
        "parameters": [
            {
                "name": "n_components",
                "type": "int",
                "defaultValue": null,
                "optional": "true",
                "description": "Number of components to keep. If `n_components` is not set all components are kept: `n_components == min(n_samples, n_features)`."
            },
            {
                "name": "n_selected_components",
                "type": "int",
                "defaultValue": null,
                "optional": "true",
                "description": "Number of selected principal components for calculating the outlier scores. It is not necessarily equal to the total number of the principal components. If not set, use all principal components."
            },
            {
                "name": "whiten",
                "type": "boolean",
                "defaultValue": "false",
                "optional": "true",
                "description": "When True the `components_` vectors are multiplied by the square root of `n_samples` and then divided by the singular values to ensure uncorrelated outputs with unit component-wise variances. Whitening will remove some information from the transformed signal (the relative variance scales of the components) but can sometime improve the predictive accuracy of the downstream estimators by making their data respect some hard-wired assumptions."
            },
            {
                "name": "svd_solver",
                "type": "enum[auto,full,arpack,randomized]",
                "defaultValue": "auto",
                "optional": "true",
                "description": "'auto': the solver is selected by a default policy based on `X.shape` and `n_components`. If the input data is larger than 500x500 and the number of components to extract is lower than 80% of the smallest dimension of the data, then the more efficient 'randomized' method is enabled. Otherwise the exact full SVD is computed and optionally truncated afterwards. 'full': run exact full SVD calling the standard LAPACK solver via `scipy.linalg.svd` and select the components by postprocessing. 'arpack': run SVD truncated to n_components calling ARPACK solver via `scipy.sparse.linalg.svds`. It requires strictly `0 < n_components < X.shape[1]`. 'randomized': run randomized SVD by the method of Halko et al."
            },
            {
                "name": "tol",
                "type": "float",
                "defaultValue": 0.0,
                "optional": "true",
                "description": "Tolerance for singular values computed by `svd_solver == 'arpack'`."
            },
            {
                "name": "max_iter",
                "type": "int",
                "defaultValue": null,
                "optional": "true",
                "description": "Number of iterations for the power method computed by `svd_solver == 'randomized'`."
            },
            {
                "name": "random_state",
                "type": "int",
                "defaultValue": 42,
                "optional": "true",
                "description": "Used when `svd_solver == 'arpack' or svd_solver == 'randomized'` to seed random number generation."
            }
        ],
        "modelInput": "none"
    }
}
